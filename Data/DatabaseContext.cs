// Data/DatabaseContext.cs
using SQLite;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Manager_for_3_D_Printing.Models;
using Microsoft.Maui.Storage;

namespace Manager_for_3_D_Printing.Data
{
    public class DatabaseContext
    {
        public SQLiteAsyncConnection Connection { get; }

        public DatabaseContext(string dbPath)
        {
            Connection = new SQLiteAsyncConnection(dbPath);
            _ = InitializeAsync();
        }

        private async Task InitializeAsync()
        {
            
            // DEV: delete old DB on each run to pick up new schema (optional)
            // if (File.Exists(Connection.DatabasePath)) File.Delete(Connection.DatabasePath);

            // 1) Create tables for all your models
            await Connection.CreateTableAsync<Model>();
            await Connection.CreateTableAsync<ModelFile>();
            await Connection.CreateTableAsync<ModelTag>();
            await Connection.CreateTableAsync<ModelVersion>();
            await Connection.CreateTableAsync<PrintQueueItem>();

            // 2) Seed test data if you're starting fresh
            await SeedTestDataAsync();
        }

        private async Task SeedTestDataAsync()
        {
            var count = await Connection.Table<Model>().CountAsync();
            if (count > 0)
                return;

            // Populate all fields on your current Model.cs
            var cube = new Model
            {
                // Id will be auto-generated by the property initializer
                Name         = "Calibration Cube",
                Slug         = "calibration-cube",
                Description  = "Standard 20 mm test cube for printer calibration",
                Tags         = "calibration,test",
                SourceUrl    = "https://example.com/models/calibration-cube",
                DateAdded    = DateTime.UtcNow,
                LastPrinted  = null
            };
            await Connection.InsertAsync(cube);

            // Optionally link a file record
            await Connection.InsertAsync(new ModelFile
            {
                ModelId  = cube.Id,
                FileType = "stl",
                FilePath = "Assets/Models/calibration_cube.stl"
            });

            // Optionally add a tag record
            await Connection.InsertAsync(new ModelTag
            {
                ModelId = cube.Id,
                Tag     = "calibration"
            });

            // Optionally add a version record
            await Connection.InsertAsync(new ModelVersion
            {
                ModelId      = cube.Id,
                Notes        = "Initial upload",
                VersionLabel = "v1.0",
                CreatedAt    = DateTime.UtcNow
            });

            // And enqueue a print job
            await Connection.InsertAsync(new PrintQueueItem
            {
                ModelId      = cube.Id,
                FilamentType = "PLA",
                Status       = "Pending"
            });
        }

        // —— Model CRUD ——
        public Task<int> InsertModelAsync(Model m)      => Connection.InsertAsync(m);
        public Task<List<Model>> GetAllModelsAsync()    => Connection.Table<Model>().ToListAsync();
        public Task<int> UpdateModelAsync(Model m)      => Connection.UpdateAsync(m);
        public Task<int> DeleteModelAsync(Model m)      => Connection.DeleteAsync(m);

        // —— ModelFile CRUD ——
        public Task<int> InsertModelFileAsync(ModelFile f) => Connection.InsertAsync(f);
        public Task<List<ModelFile>> GetFilesByModelAsync(string modelId)
            => Connection.Table<ModelFile>().Where(f => f.ModelId == modelId).ToListAsync();

        // —— ModelTag CRUD ——
        public Task<int> InsertModelTagAsync(ModelTag t) => Connection.InsertAsync(t);
        public Task<List<ModelTag>> GetTagsByModelAsync(string modelId)
            => Connection.Table<ModelTag>().Where(t => t.ModelId == modelId).ToListAsync();

        // —— ModelVersion CRUD ——
        public Task<int> InsertModelVersionAsync(ModelVersion v) => Connection.InsertAsync(v);
        public Task<List<ModelVersion>> GetVersionsByModelAsync(string modelId)
            => Connection.Table<ModelVersion>().Where(v => v.ModelId.ToString() == modelId).ToListAsync();

        // —— PrintQueueItem CRUD ——
        public Task<int> EnqueuePrintAsync(PrintQueueItem q) => Connection.InsertAsync(q);
        public Task<List<PrintQueueItem>> GetAllQueueItemsAsync()
            => Connection.Table<PrintQueueItem>().ToListAsync();
        public Task<int> UpdateQueueItemAsync(PrintQueueItem q) => Connection.UpdateAsync(q);
        public Task<int> DeleteQueueItemAsync(PrintQueueItem q) => Connection.DeleteAsync(q);
    }
}
